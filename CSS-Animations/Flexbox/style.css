body {
	background-color: #333;
}

.container {
	border: 10px solid white;
	display: flex;
	/* flex-direction: column; */
	height: 80vh;
	/* align-items: flex-start; */
}

.box {
	font-family: Helvetica, sans-serif;
	font-size: 64px;
	padding: 10px;
	text-align: center;
	color: white;
	box-sizing: border-box;

	/* flex-basis is the hypothetical, ideal width of an item BEFORE resizing occurs within the container */
	/* flex-grow dictates how the unused space is spread between flex items, in terms of ratios */
	/* flex-shrink dictates how items should shrink when there isn't enough space in container. Interestingly enough, the formula for divvying up space is different  */

	/* flex-basis is like height when working with cols, width when working with rows */
	flex-basis: 350px;
	flex-grow: 1;
	flex-shrink: 0;
}

/* order allows us to specify the way that items are laid out within a flex container */
/* by default, an item's order value is 0 */

/* flex defines how a flex item will grow or shrink to fit the available space in a container; flex is shorthand for flex-grow, flex-shrink, flex-basis */

.box-1 {
	background-color: red;
	/* flex-grow: 1; */
 }
.box-2 {
	background-color: orange;
	/* font-size: 150px; */
	/* align-self allows us to override align-items on an individual items*/
	/* default value for align-self is stretch */
	/* align-self: flex-end; */
	/* flex-grow: 3; */
	flex-shrink: 2;
 }
.box-3 {
	background-color: yellow;
	/* flex-basis: 100px; */
	flex-shrink: 2;
 }
.box-4 {
	background-color: green;
	/* font-size: 50px; */
	/* align-self: center; */
	/* order: 10; */
}
.box-5 { background-color: purple; }
.box-6 { background-color: teal; }
.box-7 { background-color: gray; }
.box-8 {
	background-color: brown;
	/* order: -1; at the beginning */
	/* align-self: flex-end; */
 }
.box-9 { background-color: pink; } */
